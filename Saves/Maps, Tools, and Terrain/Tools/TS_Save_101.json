{
  "SaveName": "Battlescribe2TTS",
  "GameMode": "Large Wood Table",
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Date": "3/12/2020 5:34:40 PM",
  "Table": "Table_Hexagon",
  "Sky": "Sky_Regal",
  "Note": "",
  "Rules": "",
  "XmlUI": "<!-- Xml UI. See documentation: https://api.tabletopsimulator.com/ui/introUI/ -->",
  "LuaScript": "--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]\n\n--[[ The onLoad event is called after the game save finishes loading. --]]\nfunction onLoad()\n    --[[ print('onLoad!') --]]\nend\n\n--[[ The onUpdate event is called once per frame. --]]\nfunction onUpdate()\n    --[[ print('onUpdate loop!') --]]\nend",
  "LuaScriptState": "",
  "MusicPlayer": {
    "RepeatSong": true,
    "PlaylistEntry": -1,
    "CurrentAudioTitle": "Ultramarines Chant",
    "CurrentAudioURL": "http://cloud-3.steamusercontent.com/ugc/773976977327440295/17C1CAA1F70F178395E93C05E55946061E695598/",
    "AudioLibrary": [
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/773976977327440295/17C1CAA1F70F178395E93C05E55946061E695598/",
        "Item2": "Ultramarines Chant"
      }
    ]
  },
  "Grid": {
    "Type": 0,
    "Lines": false,
    "Color": {
      "r": 0.0,
      "g": 0.0,
      "b": 0.0
    },
    "Opacity": 0.75,
    "ThickLines": false,
    "Snapping": true,
    "Offset": false,
    "BothSnapping": false,
    "xSize": 2.25,
    "ySize": 3.29,
    "PosOffset": {
      "x": 0.0,
      "y": 1.0,
      "z": 0.0
    }
  },
  "Lighting": {
    "LightIntensity": 0.54,
    "LightColor": {
      "r": 1.0,
      "g": 0.9804,
      "b": 0.8902
    },
    "AmbientIntensity": 1.3,
    "AmbientType": 0,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "ReflectionIntensity": 1.0,
    "LutIndex": 0,
    "LutContribution": 1.0
  },
  "Hands": {
    "Enable": true,
    "DisableUnused": false,
    "Hiding": 0,
    "HandTransforms": [
      {
        "Color": "Red",
        "Transform": {
          "posX": -13.6427746,
          "posY": 3.557496,
          "posZ": -7.488285,
          "rotX": 0.0,
          "rotY": 60.0000038,
          "rotZ": 0.0,
          "scaleX": 10.2687416,
          "scaleY": 6.63429546,
          "scaleZ": 4.893597
        }
      },
      {
        "Color": "Yellow",
        "Transform": {
          "posX": -13.3166122,
          "posY": 3.55751085,
          "posZ": 8.302244,
          "rotX": 0.0,
          "rotY": 119.999992,
          "rotZ": 0.0,
          "scaleX": 10.2709045,
          "scaleY": 6.63429546,
          "scaleZ": 4.89421749
        }
      },
      {
        "Color": "Blue",
        "Transform": {
          "posX": 13.5729589,
          "posY": 3.55798149,
          "posZ": 7.749259,
          "rotX": -4.6986E-05,
          "rotY": 240.0,
          "rotZ": -7.410326E-06,
          "scaleX": 10.2690306,
          "scaleY": 6.63429546,
          "scaleZ": 4.89370441
        }
      },
      {
        "Color": "White",
        "Transform": {
          "posX": -0.000191688538,
          "posY": 3.557742,
          "posZ": -15.5336924,
          "rotX": 2.5444431E-14,
          "rotY": 1.70754709E-06,
          "rotZ": -1.70754709E-06,
          "scaleX": 10.2680635,
          "scaleY": 6.63429546,
          "scaleZ": 4.89357662
        }
      },
      {
        "Color": "Green",
        "Transform": {
          "posX": 0.00160074234,
          "posY": 3.557703,
          "posZ": 15.5951328,
          "rotX": 0.0,
          "rotY": 180.0,
          "rotZ": 0.0,
          "scaleX": 10.2693949,
          "scaleY": 6.63429546,
          "scaleZ": 4.89419842
        }
      },
      {
        "Color": "Pink",
        "Transform": {
          "posX": 13.6821318,
          "posY": 3.55798149,
          "posZ": -7.407929,
          "rotX": -1.07028254E-05,
          "rotY": 299.999969,
          "rotZ": -2.536801E-05,
          "scaleX": 10.2688847,
          "scaleY": 6.63429546,
          "scaleZ": 4.89328671
        }
      }
    ]
  },
  "Turns": {
    "Enable": false,
    "Type": 0,
    "TurnOrder": [],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "ObjectStates": [
    {
      "Name": "Bag",
      "Transform": {
        "posX": -5.332753E-06,
        "posY": 0.774966,
        "posZ": -5.002832E-06,
        "rotX": 2.07023386E-05,
        "rotY": -2.05505967E-05,
        "rotZ": -9.054673E-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Battlescribe Army Creator",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.7058823,
        "g": 0.366520882,
        "b": 0.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "Number": 0,
      "XmlUI": "<Panel width = \"600\" height = \"600\" position = \"500 0 -300\">\n  <VerticalLayout>\n    <Text fontSize=\"50\" color=\"rgb(1,1,1)\">Battlescribe Army Creator</Text>\n    <InputField onValueChanged=\"setCode\" placeholder=\"code\" fontSize=\"50\" id=\"code-input\"></InputField>\n    <Button onClick=\"submitCode\" fontSize=\"50\">Submit Code</Button>\n    <Button onClick=\"createArmy\" id=\"create-army\" fontSize=\"50\">Create Army</Button>\n  </VerticalLayout>\n</Panel>\n\n",
      "LuaScript": "ACTIVATED_BUTTON = \"rgb(1,0.6,1)|rgb(1,0.4,1)|rgb(1,0.2,1)|rgb(1,0.2,1)\"\nDEFAULT_BUTTON = \"#FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)\"\nprodServerURL = \"https://backend.battlescribe2tts.net\"\nserverURL = prodServerURL\nversion = \"1.5\"\n\nnextModelTarget = \"\"\nnextModelButton = \"\"\ndescriptorMapping = {}\ncode = \"\"\nrosterMapping = {}\nbuttonMapping = {}\nstoredDataMapping = {}\ncreateArmyLock = false\n\nfunction onScriptingButtonDown(index, peekerColor)\n  local player = Player[peekerColor]\n  if index == 1 and player.getHoverObject() and player.getHoverObject().getGUID() == self.getGUID() then\n    broadcastToAll(\"Activating Development Mode\")\n    serverURL = \"http://localhost:8080\"\n  end\n  if index == 2 and player.getHoverObject() and player.getHoverObject().getGUID() == self.getGUID() then\n    broadcastToAll(\"Activating Production Mode\")\n    serverURL = prodServerURL\n  end\nend\n\nfunction tempLock()\n  self.setLock(true)\n  local this = self\n  Wait.time(\n    function()\n      this.setLock(false)\n    end,\n    3\n  )\nend\n\nfunction onLoad()\n  local contained = self.getObjects()\n  for k, v in pairs(contained) do\n    local name = v.name\n    local data = JSON.decode(v.description)\n    rosterMapping[name] = data.json\n    descriptorMapping[name] = data.descriptor\n    storedDataMapping[name] = v.guid\n  end\n  checkVersion()\n  Wait.time(announce, 4)\nend\n\nfunction announce()\n  broadcastToAll(\"Thanks for using Battlescribe Army Creator! Go to https://battlescribe2tts.net for instructions\")\nend\n\nfunction checkVersion()\n  WebRequest.get(serverURL .. \"/version\", verifyVersion)\nend\n\nfunction verifyVersion(req)\n  if req and req.text then\n    local json = JSON.decode(req.text)\n    if json and json.id then\n      local remoteVersion = json.id\n      if remoteVersion ~= version then\n        Wait.time(\n          function()\n            broadcastToAll(\n              \"You are using an out-of-date version of Battlescribe Army Creator. \" ..\n                \"Get the latest version from the workshop!\"\n            )\n          end,\n          3\n        )\n      end\n    end\n  end\nend\n\nfunction setModel(player, value, id)\n  nextModelTarget = self.UI.getAttribute(id, \"modelName\")\n  local shortName = self.UI.getAttribute(id, \"shortName\")\n  nextModelButton = id\n  broadcastToAll(\"Pick up an object to set it as the model for \" .. shortName)\nend\n\nfunction onObjectPickUp(colorName, obj)\n  if nextModelTarget ~= \"\" then\n    obj.highlightOn({1, 0, 1}, 5)\n    self.UI.setAttribute(nextModelButton, \"colors\", ACTIVATED_BUTTON)\n    local bounds = obj.getBoundsNormalized()\n    local width = math.max(bounds.size.x, bounds.size.z) * 1.2\n    local copy = JSON.decode(obj.getJSON())\n    copy.Nickname = nextModelTarget\n    copy.States = nil\n    copy.Width = width\n    local data = {\n      name = nextModelTarget,\n      descriptor = descriptorMapping[nextModelTarget],\n      json = copy,\n      width = width\n    }\n    local jsonData = JSON.encode(data)\n    local this = self\n    spawnObject(\n      {\n        type = \"Notecard\",\n        callback_function = function(spawned)\n          spawned.setVar(\"bs2tts-allowed\", \"true\")\n          spawned.setName(data.name)\n          spawned.setDescription(jsonData)\n          this.putObject(spawned)\n        end\n      }\n    )\n    nextModelTarget = \"\"\n    nextModelButton = \"\"\n  end\nend\n\nfunction filterObjectEnter(obj)\n  return obj.getVar(\"bs2tts-allowed\") == true\nend\n\nfunction onObjectLeaveContainer(thisContainer, takenObject)\n  if thisContainer.getGUID() == self.getGUID() then\n    tempLock()\n    local name = takenObject.getName()\n    rosterMapping[name] = nil\n    storedDataMapping[name] = nil\n    if buttonMapping[name] ~= nil then\n      thisContainer.UI.setAttribute(buttonMapping[name], \"colors\", DEFAULT_BUTTON)\n    end\n  end\nend\n\nfunction onObjectEnterContainer(thisContainer, addedObject)\n  if thisContainer.getGUID() == self.getGUID() then\n    tempLock()\n    local name = addedObject.getName()\n    local data = JSON.decode(addedObject.getDescription())\n    if storedDataMapping[name] ~= nil then\n      self.takeObject(\n        {\n          guid = storedDataMapping[name],\n          callback_function = function(obj)\n            obj.destruct()\n          end\n        }\n      )\n    end\n    descriptorMapping[name] = data.descriptor\n    rosterMapping[name] = data.json\n    storedDataMapping[name] = addedObject.guid\n    if buttonMapping[name] ~= nil then\n      thisContainer.UI.setAttribute(buttonMapping[name], \"colors\", ACTIVATED_BUTTON)\n    end\n  end\nend\n\nfunction setCode(player, value, id)\n  code = value\nend\n\nfunction getCode()\n  return code\nend\n\nfunction submitCode(player, value, id)\n  if player.host then\n    WebRequest.get(serverURL .. \"/roster/\" .. getCode() .. \"/names\", processNames)\n  else\n    broadcastToAll(\"Sorry, only the host of this game may use the Battlescribe Army Creator\")\n  end\nend\n\nfunction tabToS(tab)\n  local s = \"{\"\n  for k, v in pairs(tab) do\n    s = s .. k .. \"=\" .. tostring(v) .. \",\"\n  end\n  s = s .. \"}\"\n  return s\nend\n\nfunction processNames(webReq)\n  tempLock()\n  if not webReq or webReq.error or webReq.is_error then\n    broadcastToAll(\"Error in web request: No such roster or server error\")\n    return\n  end\n  local response = JSON.decode(webReq.text)\n  local buttonNames = {}\n  local shortNames = {}\n  for k, v in pairs(response.modelsRequested) do\n    local weapons = \"\"\n    for k, v in pairs(v.modelWeapons) do\n      if weapons ~= \"\" then\n        weapons = weapons .. \", \"\n      end\n      weapons = weapons .. v\n    end\n    local name = \"Model: \" .. v.modelName .. \"\\nWeapons: \" .. weapons\n    table.insert(buttonNames, name)\n    shortNames[name] = v.modelName\n    descriptorMapping[name] = v\n  end\n  local zOffset = -3\n  local xOffset = 3\n  local vectors = {}\n  local index = 0\n  local newButtons = {}\n  local heightInc = 220\n  local widthInc = 820\n  local colHeight = 10\n  for k, v in pairs(buttonNames) do\n    local buttonColor = DEFAULT_BUTTON\n    if rosterMapping[v] ~= nil then\n      buttonColor = ACTIVATED_BUTTON\n    end\n    local buttonId = \"select \" .. v .. \" \" .. index\n    buttonMapping[v] = buttonId\n    table.insert(\n      newButtons,\n      {\n        tag = \"Button\",\n        attributes = {\n          id = buttonId,\n          onClick = \"setModel\",\n          modelName = v,\n          shortName = shortNames[v],\n          padding = 20,\n          colors = buttonColor,\n          fontSize = 50,\n          height = heightInc,\n          width = widthInc,\n          offsetXY = widthInc * (math.floor(index / colHeight)) .. \" \" .. -1 * heightInc * (index % colHeight)\n        },\n        value = v\n      }\n    )\n    index = index + 1\n  end\n  local panel = {\n    tag = \"Panel\",\n    attributes = {\n      width = widthInc * ((#buttonNames / colHeight) + 1),\n      height = heightInc * colHeight,\n      position = \"1300 0 -300\"\n    },\n    children = newButtons\n  }\n  local currentUI = self.UI.getXmlTable()\n  self.UI.setXmlTable({currentUI[1], panel})\n  self.setVectorLines(vectors)\nend\n\nfunction spawnModelRecur(id, threads, limit, index)\n  if index < limit then\n    WebRequest.get(\n      serverURL .. \"/v2/roster/\" .. id .. \"/\" .. index,\n      function(req)\n        if req and req.text then\n          local v = JSON.decode(req.text)\n          local relPos = v.Transform\n          local thisPos = self.getPosition()\n          local adjustedPos = {\n            x = thisPos.x + relPos.posX - 20,\n            y = thisPos.y + relPos.posY + 4,\n            z = thisPos.z + relPos.posZ\n          }\n          local jv = JSON.encode(v)\n          spawnObjectJSON(\n            {\n              json = jv,\n              position = adjustedPos\n            }\n          )\n          spawnModelRecur(id, threads, limit, index + 1)\n        else\n          broadcastToAll(\"Error requesting model \" .. index)\n        end\n      end\n    )\n  else\n    spawnThreadCounter = spawnThreadCounter + 1\n    if spawnThreadCounter >= threads then\n      broadcastToAll(\"Army creation complete!\")\n    end\n  end\nend\n\nspawnThreadCounter = 0\n\nfunction createArmy(player, value, id)\n  if player.host then\n    if not createArmyLock then\n      spawnThreadCounter = 0\n      tempLock()\n      createArmyLock = true\n      Wait.time(\n        function()\n          createArmyLock = false\n          self.UI.setAttribute(id, \"interactable\", \"true\")\n        end,\n        5\n      )\n      self.UI.setAttribute(id, \"interactable\", \"false\")\n      mappingResponse = {modelAssignments = {}}\n      for name, json in pairs(rosterMapping) do\n        local assignment = {\n          modelJSON = json,\n          descriptor = descriptorMapping[name]\n        }\n        table.insert(mappingResponse.modelAssignments, assignment)\n      end\n      local jsonToSend = JSON.encode(mappingResponse)\n      broadcastToAll(\"Contacting Server (this may take a minute or two)...\")\n      WebRequest.put(\n        serverURL .. \"/v2/roster/\" .. getCode(),\n        jsonToSend,\n        function(req)\n          broadcastToAll(\"Loading Models...\")\n          if not req or req.is_error then\n            broadcastToAll(\"Error in web request\")\n          end\n          local status, result =\n            pcall(\n            function()\n              return JSON.decode(req.text)\n            end\n          )\n          if status then\n            local response = JSON.decode(req.text)\n            local itemsToSpawn = response.itemCount\n            local groupsOf = 10\n            for i = 0, (itemsToSpawn / groupsOf), 1 do\n              local start = i * groupsOf\n              spawnModelRecur(getCode(), (itemsToSpawn / groupsOf), math.min(start + groupsOf, itemsToSpawn), start)\n            end\n          else\n            broadcastToAll(\"Got error: \" .. req.text, {r = 1, g = 0, b = 0})\n          end\n        end\n      )\n    end\n  else\n    broadcastToAll(\"Sorry, only the host of this game may use the Battlescribe Army Creator\")\n  end\nend\n",
      "LuaScriptState": "",
      "GUID": "920354"
    }
  ],
  "DecalPallet": [],
  "TabStates": {
    "0": {
      "title": "Rules",
      "body": "Game start:\nPick a card (that will be your adventurer) Each one has different abilities. Specialty is used at any time during your turn as the adventurer, the ultimate ability can only be used once per turn, once used you tab the card. (turn it sideways)\n\nRoll all the party dice at the beginning of your turn as the adventurer. (Guild leader gets one additional party die to roll)\n\nDungeon master rolls dungeon dice based on level (level 1=1 die, level 2=2 die, and so on) If you can't roll the amount needed for a level you just roll all the dice. (ex. level 8 you just roll all 7)\n\nAt the end of your turn as the adventurer, collect XP based on level reached, add 1 additional XP per dragon defeated on your turn. You pass the dice to the left. (Dungeon master now becomes the adventurer and next player to the left of them becomes the dungeon master)\n\nDragons: When a dragon is rolled it goes to the Dragon's Lair, when three are in the lair you must fight the dragon. You need three different classes to defeat the dragon. If defeated you collect one additional XP and a treasure.\n\nEnd game:\nAfter three dungeon delves XP is added up and the player with the most XP wins. Any treasure accumulated at the end of the game counts as one additional XP.  (Town portal counts as 2 XP and dragon scales count as 2 XP if you have a pair, otherwise they count as nothing.\n\nLearn to play in more detail here:\nhttps://www.youtube.com/watch?v=PzZ8hUzXBtE",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    },
    "1": {
      "title": "White",
      "body": "",
      "color": "White",
      "visibleColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "id": 1
    },
    "2": {
      "title": "Brown",
      "body": "",
      "color": "Brown",
      "visibleColor": {
        "r": 0.443,
        "g": 0.231,
        "b": 0.09
      },
      "id": 2
    },
    "3": {
      "title": "Red",
      "body": "",
      "color": "Red",
      "visibleColor": {
        "r": 0.856,
        "g": 0.1,
        "b": 0.094
      },
      "id": 3
    },
    "4": {
      "title": "Orange",
      "body": "",
      "color": "Orange",
      "visibleColor": {
        "r": 0.956,
        "g": 0.392,
        "b": 0.113
      },
      "id": 4
    },
    "5": {
      "title": "Yellow",
      "body": "",
      "color": "Yellow",
      "visibleColor": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.172
      },
      "id": 5
    },
    "6": {
      "title": "Green",
      "body": "",
      "color": "Green",
      "visibleColor": {
        "r": 0.192,
        "g": 0.701,
        "b": 0.168
      },
      "id": 6
    },
    "7": {
      "title": "Blue",
      "body": "",
      "color": "Blue",
      "visibleColor": {
        "r": 0.118,
        "g": 0.53,
        "b": 1.0
      },
      "id": 7
    },
    "8": {
      "title": "Teal",
      "body": "",
      "color": "Teal",
      "visibleColor": {
        "r": 0.129,
        "g": 0.694,
        "b": 0.607
      },
      "id": 8
    },
    "9": {
      "title": "Purple",
      "body": "",
      "color": "Purple",
      "visibleColor": {
        "r": 0.627,
        "g": 0.125,
        "b": 0.941
      },
      "id": 9
    },
    "10": {
      "title": "Pink",
      "body": "",
      "color": "Pink",
      "visibleColor": {
        "r": 0.96,
        "g": 0.439,
        "b": 0.807
      },
      "id": 10
    },
    "11": {
      "title": "Black",
      "body": "",
      "color": "Black",
      "visibleColor": {
        "r": 0.25,
        "g": 0.25,
        "b": 0.25
      },
      "id": 11
    }
  },
  "VersionNumber": "v12.2.2"
}